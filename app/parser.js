/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[9,14],$V2=[11,12],$V3=[1,43],$V4=[24,28],$V5=[1,57],$V6=[19,29],$V7=[1,79],$V8=[1,80],$V9=[1,81],$Va=[1,89],$Vb=[11,34];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"MIGRATION":3,"php":4,"USES":5,"CLASS":6,"eof":7,"USE":8,"use":9,"PATH":10,"ptoComa":11,"barra":12,"id":13,"clase":14,"extends":15,"llaveA":16,"UP":17,"DOWN":18,"llaveC":19,"publico":20,"funcion":21,"up":22,"parenA":23,"parenC":24,"static_accesor":25,"create":26,"CADENA":27,"coma":28,"table":29,"DEFS":30,"down":31,"dropifexists":32,"DEF":33,"accesor":34,"COLTYPE":35,"EXPS":36,"MODIFIERS":37,"increments":38,"cadena":39,"entero":40,"booleano":41,"datetime":42,"timestamp":43,"float":44,"decimal":45,"timestamps":46,"remembertoken":47,"MODIFIER":48,"nullable":49,"unsigned":50,"unique":51,"default":52,"E":53,"booleanoLit":54,"enteroLit":55,"decimalLit":56,"cadenaLit":57,"$accept":0,"$end":1},
terminals_: {2:"error",4:"php",7:"eof",9:"use",11:"ptoComa",12:"barra",13:"id",14:"clase",15:"extends",16:"llaveA",19:"llaveC",20:"publico",21:"funcion",22:"up",23:"parenA",24:"parenC",25:"static_accesor",26:"create",28:"coma",29:"table",31:"down",32:"dropifexists",34:"accesor",38:"increments",39:"cadena",40:"entero",41:"booleano",42:"datetime",43:"timestamp",44:"float",45:"decimal",46:"timestamps",47:"remembertoken",49:"nullable",50:"unsigned",51:"unique",52:"default",54:"booleanoLit",55:"enteroLit",56:"decimalLit",57:"cadenaLit"},
productions_: [0,[3,4],[5,2],[5,1],[8,3],[10,3],[10,1],[6,8],[17,23],[18,14],[30,2],[30,1],[33,8],[33,7],[33,6],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[37,2],[37,1],[48,4],[48,4],[48,4],[48,5],[36,3],[36,1],[53,1],[53,1],[53,1],[53,1],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 7:
 this.$ = {type: 'migration', up: $$[$0-2],  down : $$[$0-1] } 
break;
case 8:
 this.$ = {type: 'up', table: $$[$0-12],  definitions : $$[$0-4].children } 
break;
case 9:
 this.$ = {type: 'down', table: $$[$0-3]} 
break;
case 10: case 25:
 var arr = $$[$0-1].children; var arr2 = arr.concat($$[$0]); $$[$0-1].children = arr2; this.$ = $$[$0-1];  
break;
case 11:
  this.$ = { type: 'definitions', children: [$$[$0]] } 
break;
case 12:
 this.$ = { coltype: $$[$0-5].val, name: $$[$0-3].children.shift(), details: $$[$0-3].children, modifiers : $$[$0-1].children } 
break;
case 13:
 this.$ = { coltype: $$[$0-4].val, name: $$[$0-2].children.shift(), details: $$[$0-2].children } 
break;
case 14:
 this.$ = { coltype: $$[$0-3].val  } 
break;
case 15:
this.$ = {type: 'coltype', val: 'increments' } 
break;
case 16:
this.$ = {type: 'coltype', val: 'string' } 
break;
case 17:
this.$ = {type: 'coltype', val: 'integer' } 
break;
case 18:
this.$ = {type: 'coltype', val: 'boolean' } 
break;
case 19:
this.$ = {type: 'coltype', val: 'datetime' } 
break;
case 20:
this.$ = {type: 'coltype', val: 'timestamp' } 
break;
case 21:
this.$ = {type: 'coltype', val: 'float' } 
break;
case 22:
this.$ = {type: 'coltype', val: 'decimal' } 
break;
case 23:
this.$ = {type: 'coltype', val: 'timestamps' } 
break;
case 24:
this.$ = {type: 'coltype', val: 'remembertoken' } 
break;
case 26:
  this.$ = { type: 'modifiers', children: [$$[$0]] } 
break;
case 27:
this.$ = { type: 'nullable' } 
break;
case 28:
this.$ = { type: 'unsigned' } 
break;
case 29:
this.$ = { type: 'unique' } 
break;
case 30:
this.$ = { type: 'default', val: $$[$0-1] } 
break;
case 31:
 var arr = $$[$0-2].children; var arr2 = arr.concat($$[$0]); $$[$0-2].children = arr2; this.$ = $$[$0-2];  
break;
case 32:
  this.$ = { type: 'expressions', children: [$$[$0]] } 
break;
case 33:
 this.$ = yytext.toLowerCase() == 'true' 
break;
case 34:
 this.$ = parseInt(yytext) 
break;
case 35:
 this.$ = parseFloat(yytext) 
break;
case 36:
 this.$ = $$[$0] 
break;
case 37:
this.$ = yytext 
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:3,8:4,9:$V0},{6:6,8:7,9:$V0,14:[1,8]},o($V1,[2,3]),{10:9,13:[1,10]},{7:[1,11]},o($V1,[2,2]),{13:[1,12]},{11:[1,13],12:[1,14]},o($V2,[2,6]),{1:[2,1]},{15:[1,15]},o($V1,[2,4]),{13:[1,16]},{13:[1,17]},o($V2,[2,5]),{16:[1,18]},{17:19,20:[1,20]},{18:21,20:[1,22]},{21:[1,23]},{19:[1,24]},{21:[1,25]},{22:[1,26]},{7:[2,7]},{31:[1,27]},{23:[1,28]},{23:[1,29]},{24:[1,30]},{24:[1,31]},{16:[1,32]},{16:[1,33]},{13:[1,34]},{13:[1,35]},{25:[1,36]},{25:[1,37]},{26:[1,38]},{32:[1,39]},{23:[1,40]},{23:[1,41]},{27:42,57:$V3},{27:44,57:$V3},{28:[1,45]},o($V4,[2,37]),{24:[1,46]},{21:[1,47]},{11:[1,48]},{23:[1,49]},{19:[1,50]},{13:[1,51]},{19:[2,9]},{29:[1,52]},{24:[1,53]},{16:[1,54]},{29:$V5,30:55,33:56},{19:[1,58],29:$V5,33:59},o($V6,[2,11]),{34:[1,60]},{24:[1,61]},o($V6,[2,10]),{35:62,38:[1,63],39:[1,64],40:[1,65],41:[1,66],42:[1,67],43:[1,68],44:[1,69],45:[1,70],46:[1,71],47:[1,72]},{11:[1,73]},{23:[1,74]},{23:[2,15]},{23:[2,16]},{23:[2,17]},{23:[2,18]},{23:[2,19]},{23:[2,20]},{23:[2,21]},{23:[2,22]},{23:[2,23]},{23:[2,24]},{19:[1,75]},{24:[1,77],27:82,36:76,53:78,54:$V7,55:$V8,56:$V9,57:$V3},{20:[2,8]},{24:[1,83],28:[1,84]},{11:[1,85]},o($V4,[2,32]),o($V4,[2,33]),o($V4,[2,34]),o($V4,[2,35]),o($V4,[2,36]),{11:[1,87],34:$Va,37:86,48:88},{27:82,53:90,54:$V7,55:$V8,56:$V9,57:$V3},o($V6,[2,14]),{11:[1,91],34:$Va,48:92},o($V6,[2,13]),o($Vb,[2,26]),{49:[1,93],50:[1,94],51:[1,95],52:[1,96]},o($V4,[2,31]),o($V6,[2,12]),o($Vb,[2,25]),{23:[1,97]},{23:[1,98]},{23:[1,99]},{23:[1,100]},{24:[1,101]},{24:[1,102]},{24:[1,103]},{27:82,53:104,54:$V7,55:$V8,56:$V9,57:$V3},o($Vb,[2,27]),o($Vb,[2,28]),o($Vb,[2,29]),{24:[1,105]},o($Vb,[2,30])],
defaultActions: {11:[2,1],24:[2,7],50:[2,9],63:[2,15],64:[2,16],65:[2,17],66:[2,18],67:[2,19],68:[2,20],69:[2,21],70:[2,22],71:[2,23],72:[2,24],75:[2,8]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var nid = 0;
    function addChildren(node, child){
      node.splice(2,1,child); 
      return node;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.pushState('ML_COMMENT');
break;
case 1:this.popState();
break;
case 2:/* Se ignora */
break;
case 3:/* Se ignora */
break;
case 4:throw "Final inesperado de archivo (comentario no cerrado)";
break;
case 5: this.pushState('STRING'); limpiarString(); 
break;
case 6: 
							this.popState(); 
							yy_.yytext=getString(); 
							return 57; 
						
break;
case 7: appendString(yy_.yytext); 
break;
case 8: appendString(yy_.yytext); 
break;
case 9: appendString(yy_.yytext); yy_.yytext=getString(); return 'errorLex'; 
break;
case 10: this.pushState('STRING2'); limpiarString(); 
break;
case 11: 
							this.popState(); 
							yy_.yytext=getString(); 
							return 57; 
						
break;
case 12: appendString(yy_.yytext); 
break;
case 13: appendString(yy_.yytext); 
break;
case 14: appendString(yy_.yytext); yy_.yytext=getString(); return 'errorLex'; 
break;
case 15:/* ignorar comentario de línea */
break;
case 16:/* skip whitespace */
break;
case 17:return 56
break;
case 18:return 55
break;
case 19:return 54
break;
case 20:return 54
break;
case 21:return 41
break;
case 22:return 40
break;
case 23:return 44
break;
case 24:return 39
break;
case 25:return 42
break;
case 26:return 45
break;
case 27:return 4
break;
case 28:return 9
break;
case 29:return 20
break;
case 30:return 14
break;
case 31:return 15
break;
case 32:return 21
break;
case 33:return 29
break;
case 34:return 22
break;
case 35:return 31
break;
case 36:return 26
break;
case 37:return 32
break;
case 38:return 38
break;
case 39:return 43
break;
case 40:return 46
break;
case 41:return 47
break;
case 42:return 49
break;
case 43:return 50
break;
case 44:return 51
break;
case 45:return 52
break;
case 46:return 'foreign'
break;
case 47:return 'dropforeign'
break;
case 48:return 'references'
break;
case 49:return 'on'
break;
case 50:return 13
break;
case 51:return 34
break;
case 52:return 25
break;
case 53:return 12
break;
case 54:return 16
break;
case 55:return 19
break;
case 56:return 23
break;
case 57:return 24
break;
case 58:return 'corcheteA'
break;
case 59:return 'corcheteC'
break;
case 60:return 28
break;
case 61:return 11
break;
case 62:return 'errorLex'
break;
case 63:return 'errorLex'
break;
case 64:return 7
break;
}
},
rules: [/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:(.|\s))/i,/^(?:\n)/i,/^(?:$)/i,/^(?:")/i,/^(?:")/i,/^(?:(\n|\r))/i,/^(?:[^"\r\n])/i,/^(?:$)/i,/^(?:')/i,/^(?:')/i,/^(?:(\n|\r))/i,/^(?:[^\'\r\n])/i,/^(?:$)/i,/^(?:\/\/(.|$)*)/i,/^(?:\s+)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:boolean\b)/i,/^(?:integer\b)/i,/^(?:float\b)/i,/^(?:string\b)/i,/^(?:datetime\b)/i,/^(?:decimal\b)/i,/^(?:<\?php\b)/i,/^(?:use\b)/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:extends\b)/i,/^(?:function\b)/i,/^(?:\$table\b)/i,/^(?:up\b)/i,/^(?:down\b)/i,/^(?:create\b)/i,/^(?:dropifexists\b)/i,/^(?:increments\b)/i,/^(?:timestamp\b)/i,/^(?:timestamps\b)/i,/^(?:remembertoken\b)/i,/^(?:nullable\b)/i,/^(?:unsigned\b)/i,/^(?:unique\b)/i,/^(?:default\b)/i,/^(?:foreign\b)/i,/^(?:dropforeign\b)/i,/^(?:references\b)/i,/^(?:on\b)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:->)/i,/^(?:::)/i,/^(?:\\)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?:.+\s)/i,/^(?:.+$)/i,/^(?:$)/i],
conditions: {"STRING2":{"rules":[11,12,13,14],"inclusive":false},"STRING":{"rules":[6,7,8,9],"inclusive":false},"ML_COMMENT":{"rules":[1,2,3,4],"inclusive":false},"INITIAL":{"rules":[0,5,10,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
var string = "";
function limpiarString(){
  string="";
}
function appendString(char){
  string = string + char;
}
function getString(){
  return string;
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}